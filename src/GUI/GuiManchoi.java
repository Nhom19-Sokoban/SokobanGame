/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DAO.LevelSokobanDAO;
import MODEL.AStarSolver;
import MODEL.LevelSokoban;
import MODEL.ModelImage;
import MODEL.Manchoi;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.text.View;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.Timer;

/**
 *
 * @author ASUS
 */
public class GuiManchoi extends javax.swing.JFrame {

    private Manchoi manChoi;
    private int currentLevel = 1;
    private int level;
    private ModelImage modelimage;
    private Timer solveTimer;
    private int solveStepIndex;
    private List<String> solutionSteps;

    /**
     * Creates new form GuiManchoi
     */
    public GuiManchoi(int level) {
        this.currentLevel = level;
        initComponents();
        setLocationRelativeTo(null);

        this.manChoi = loadLevelFromDB("Level " + level); // lưu ý khoảng trắng giữa "Level" và số
        if (manChoi == null) {
            throw new RuntimeException("Không thể tải level từ CSDL");
        }
        modelimage = new ModelImage(manChoi);
        pnlGame.setFocusable(true);
        pnlGame.requestFocusInWindow();
        pnlGame.setLayout(new BorderLayout());
        pnlGame.add(modelimage, BorderLayout.CENTER);

        pack();
    }

    private void loadTenLevelToTextField() {
        LevelSokobanDAO dao = new LevelSokobanDAO();
        LevelSokoban lv = dao.getLevelByTen("Level " + currentLevel); // lấy theo currentLevel hiện tại

        if (lv != null) {
            txtTenlevel.setText(lv.getTenLV()); // hiển thị tên level lên JTextField
        } else {
            txtTenlevel.setText("Không tìm thấy level");
        }
    }

    private int convertStepToKeyCode(String step) {
        switch (step) {
            case "U":
                return 38; // Up arrow key code
            case "D":
                return 40; // Down arrow key code
            case "L":
                return 37; // Left arrow key code
            case "R":
                return 39; // Right arrow key code
            default:
                return -1;
        }
    }

    private Manchoi loadLevelFromDB(String tenLevel) {
        LevelSokobanDAO dao = new LevelSokobanDAO();
        LevelSokoban lv = dao.getLevelByTen(tenLevel);
        if (lv != null) {
            return new Manchoi(lv);
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy level: " + tenLevel);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGame = new javax.swing.JPanel();
        txtTenlevel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnHome = new javax.swing.JButton();
        btnGiai = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlGame.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pnlGameKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout pnlGameLayout = new javax.swing.GroupLayout(pnlGame);
        pnlGame.setLayout(pnlGameLayout);
        pnlGameLayout.setHorizontalGroup(
            pnlGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 304, Short.MAX_VALUE)
        );
        pnlGameLayout.setVerticalGroup(
            pnlGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );

        txtTenlevel.setFont(new java.awt.Font("STHupo", 0, 24)); // NOI18N
        txtTenlevel.setForeground(new java.awt.Color(0, 102, 102));
        txtTenlevel.setText("   ");

        btnHome.setBackground(new java.awt.Color(255, 204, 204));
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        btnHome.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnHome.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });

        btnGiai.setBackground(new java.awt.Color(255, 204, 204));
        btnGiai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/solve.png"))); // NOI18N
        btnGiai.setText("Giải");
        btnGiai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGiaiActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(102, 255, 102));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset1.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btnReset)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGiai, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHome)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnHome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGiai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(pnlGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtTenlevel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(txtTenlevel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlGameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pnlGameKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();
        manChoi.move(key);
        modelimage.repaint();

        if (manChoi.isCompleted()) {
            JOptionPane.showMessageDialog(GuiManchoi.this, "Bạn đã hoàn thành level " + currentLevel + "!");
            currentLevel++;

            // Tải level tiếp theo
            Manchoi nextLevel = loadLevelFromDB("Level " + currentLevel);
            if (nextLevel != null) {
                manChoi = nextLevel;
                modelimage.setModel(manChoi); // Cập nhật model cho khung vẽ
                modelimage.repaint();
            } else {
                // Nếu không còn level tiếp theo thì quay về home
                JOptionPane.showMessageDialog(GuiManchoi.this, "Chúc mừng! Bạn đã hoàn thành tất cả các màn chơi!");

                this.setVisible(false);
                Home home = new Home();
                home.setVisible(true);
            }
        }
        loadTenLevelToTextField();
    }//GEN-LAST:event_pnlGameKeyPressed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        manChoi = loadLevelFromDB("Level " + currentLevel);
        if (manChoi != null) {
            modelimage.setModel(manChoi); // cập nhật lại model trong image panel
            modelimage.repaint();
            pnlGame.requestFocusInWindow(); // để bắt sự kiện phím lại
        } else {
            JOptionPane.showMessageDialog(this, "Không thể reset level vì không tìm thấy dữ liệu level!");
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        Home home = new Home();
        home.setVisible(true);
    }//GEN-LAST:event_btnHomeActionPerformed

    private void btnGiaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGiaiActionPerformed
        // Kiểm tra xem manChoi đã được khởi tạo chưa
        if (manChoi == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng tải level trước khi giải!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Tạo đối tượng AStarSolver và gọi phương thức solve
        AStarSolver solver = new AStarSolver();
        try {
            solutionSteps = solver.solve(manChoi);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi giải: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Xử lý kết quả
        if (solutionSteps.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Không tìm thấy lời giải!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("Không tìm được lời giải cho bản đồ hiện tại.");
            return;
        }

        System.out.println("Bắt đầu tự động giải...");

        // Khởi tạo Timer để thực hiện animation
        solveStepIndex = 0;
        solveTimer = new Timer(300, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (solveStepIndex >= solutionSteps.size()) {
                    solveTimer.stop();
                    // Kiểm tra nếu level hoàn thành
                    if (manChoi.isCompleted()) {
                        JOptionPane.showMessageDialog(GuiManchoi.this,
                                "Đã hoàn thành level " + currentLevel + "!",
                                "Thông báo",
                                JOptionPane.INFORMATION_MESSAGE);

                        // Tải level tiếp theo
                        currentLevel++;
                        Manchoi nextLevel = loadLevelFromDB("Level " + currentLevel);
                        if (nextLevel != null) {
                            manChoi = nextLevel;
                            modelimage.setModel(manChoi);
                            modelimage.repaint();
                            loadTenLevelToTextField();
                        } else {
                            JOptionPane.showMessageDialog(GuiManchoi.this,
                                    "Chúc mừng! Bạn đã hoàn thành tất cả các màn chơi!",
                                    "Thông báo",
                                    JOptionPane.INFORMATION_MESSAGE);
                            setVisible(false);
                            Home home = new Home();
                            home.setVisible(true);
                        }
                    }
                    return;
                }

                // Thực hiện bước di chuyển hiện tại
                String step = solutionSteps.get(solveStepIndex);
                int key = convertStepToKeyCode(step);
                manChoi.move(key);
                modelimage.repaint();
                loadTenLevelToTextField(); // Cập nhật tên level
                solveStepIndex++;
            }
        });
        solveTimer.start();
        pnlGame.requestFocusInWindow();
    }//GEN-LAST:event_btnGiaiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiManchoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiManchoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiManchoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiManchoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                int level = 1;
                GuiManchoi v = new GuiManchoi(level);
                v.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGiai;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnReset;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnlGame;
    private javax.swing.JLabel txtTenlevel;
    // End of variables declaration//GEN-END:variables
}
